name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install backend deps
        working-directory: backend
        run: npm ci

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Backend tests
        working-directory: backend
        run: npm test

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  deploy:
    needs: build-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install backend deps
        working-directory: backend
        run: npm ci --omit=dev

      - name: Build frontend
        working-directory: frontend
        run: npm ci && npm run build

      - name: Prepare package bundle
        run: |
          mkdir -p deploy_bundle
          cp -r backend deploy_bundle/
          rm -rf deploy_bundle/backend/node_modules
          # production install
          (cd deploy_bundle/backend && npm ci --omit=dev)
          cp -r frontend/dist deploy_bundle/frontend_dist
          cp README.md deploy_bundle/

      - name: Archive bundle
        run: tar -czf bundle.tar.gz -C deploy_bundle .

      - name: Copy & Deploy over SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PROD_PORT || '22' }}
          source: bundle.tar.gz
          target: ${{ secrets.PROD_PATH }}/releases

      - name: Finalize on remote
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PROD_PORT || '22' }}
          script: |
            set -euo pipefail
            RELEASE_DIR="${{ secrets.PROD_PATH }}/releases/$(date +%Y%m%d%H%M%S)"
            mkdir -p "$RELEASE_DIR"
            mv ${{ secrets.PROD_PATH }}/releases/bundle.tar.gz "$RELEASE_DIR"/
            cd "$RELEASE_DIR"
            tar -xzf bundle.tar.gz
            rm bundle.tar.gz
            # Symlink shared data dir
            mkdir -p ${{ secrets.PROD_PATH }}/shared/data
            ln -sfn ${{ secrets.PROD_PATH }}/shared/data backend/data
            # PM2 setup
            if ! command -v pm2 >/dev/null 2>&1; then npm install -g pm2; fi
            APP_VERSION=${{ github.sha }} CORS_ORIGIN="https://${{ secrets.DOMAIN }}" pm2 startOrReload backend/ecosystem.config.cjs --update-env
            pm2 save
            ln -sfn "$RELEASE_DIR" ${{ secrets.PROD_PATH }}/current
            echo "Deployment complete: $RELEASE_DIR"
